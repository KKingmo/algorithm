/*
입국심사
문제 설명
n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
심사관은 1명 이상 100,000명 이하입니다.
입출력 예
n	times	return
6	[7, 10]	28
입출력 예 설명
가장 첫 두 사람은 바로 심사를 받으러 갑니다.

7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.

10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.

14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.

20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다
*/

function solution(n, times) {
  // 모든 사람이 심사를 받는데 걸리는 최소 시간을 알고 싶다
  // 정해진 시간동안 한 심사관이 몇 명을 상대할 수 있는지를 구할 수 있다(시간/심사시간)
  // 그리고 그 수를 더하면 정한 시간 안에 심사 가능한 최대 인원 수가 나온다
  // 구하려는 것은 최소시간이기 때문에 그 시간을 바꿔가면서 최소 시간을 찾자
  // 인원 수가 총 인원 수보다 작지 않은 시간 값 중 최대를 찾아내면 된다
  // 그런데 1씩 줄여가면서 찾게 되면 선형 시간이기 때문에 총 제곱시간이 걸린다
  // 그러니 이진탐색을 이용해서 선형로그 시간으로 줄이자

  // 우선 최대로 걸리는 시간을 알아보자(이진탐색의 우측 값이 될 것이다)
  let right = Math.max(...times) * n;
  // 가장 심사가 오래 걸리는 심사관이 모두 전담한다면 최대 시간이 걸릴 것이다
  let left = 1; // 최소 심사시간은 1분 이상이라고 주어져 있다
  let mid = Math.floor((left + right) / 2);

  // 그럼 심사시간을 기준으로 이진탐색을 진행해보자
  while (left <= right) {
    // 이진탐색은 중간값이 구하려는 값이 맞는지 확인하는 것이므로 중간값이 총 시간이 된다
    // 그 총 시간을 심사시간으로 나눈 값이 한 심사관이 시간 내에 심사 가능한 사람의 수다
    // 그 수를 다 더해주면 총 심사 가능 인원 수가 나온다
    const sum = times.reduce((acc, time) => acc + Math.floor(mid / time), 0);

    // 구한 인원 수가 실제 인원 수보다 크면 더 작은 값을 찾아야 한다
    // 그러므로 중간값보다 하나 작은 값을 우측 값으로 할당한다
    // 이 문제는 인원 수 조건을 만족하는 시간이 다수 있을 수 있고 그 중 최소값을 찾아야 한다
    // 그래서 마지막 하나가 남을 때까지 계속 걸러야 한다
    // 그러니 알맞은 값이 나왔을 때도 범위를 더 줄여줘서 값이 하나로 좁혀져야 한다
    // 그 값이 최소값일 때는 우측 값이 좌측 값보다 작아져서 반복이 끝나게 되고
    // 그 값이 최소값보다 작을 때는 좌측 값이 우측 값보다 커져서 반복이 끝나게 된다
    // 그리고 좌측 값이 두 경우 모두 구하려는 값을 가지고 있다

    if (sum < n) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
    mid = Math.floor((left + right) / 2);
  }

  return left;
}

describe("solution", () => {
  test("1", () => {
    expect(solution(6, [7, 10])).toEqual(28);
  });
});
